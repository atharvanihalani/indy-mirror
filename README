
TODO
    figure movement glitches
    add ghost
    give ghost random motion
    add timer
    implement stack for backtracking
    have a couple diff end screens
    maze visibility
    pacman mouth moving
    home screen to show instructions + select maze size (affects timer & num of ghosts)
    tweak maze generation so that row 0 and col 0 aren't all fully connected

    add konami code easter egg??


design choices

    i used a separate child class for each MazeBlock instead of a) interfaces or
    b) making them within a single method
    latter cuz, with constraints array, common methods, etc, made more sense to
    have a distinct class for that. former cuz of more efficient polymorphic code

    the maze is procedurally generated starting from the bottom right cuz a) the
    constraints propagate outwards from there (and b) 'solvability' is more likely
    if I start from the end block??)

    note: both sets of 2d arrays are in row major

    note: when initializing a block, j and i are switched cuz i'm first setting xPos
    THEN setting yPos. however, the row-major representation has that the other way round.

    talk about outer and inner constraints

    defend my choosing of arraylist of generic type object

    random generation method pretty inefficient ngl. not sure what a better way could be?

    'running an arbitrary number of times till it works' logic is necessary for the random
    element. However, it also has atrocious time complexity.
